% exercise_07_02_01a.m
% 問題 7.2 (1)：簡略化されたナイキストの安定判別法
% 【Symbolic Math Toolbox が必要】

clear
format compact

disp(' ')
disp('==================================================')
disp(' 問題 7.2 (1)：簡略化されたナイキストの安定判別法 ')
disp('==================================================')

syms s
syms w real
syms kP positive

disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' 　　　　　　　　　                1        ')
disp(' 制御対象の伝達関数 P(s) = -----------------')
disp(' 　　　　　　　　　        (s + 1)^2 (s + 2)')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

Ps = 1/((s + 1)^2*(s + 2))
Ps = collect(Ps,s)          % s について降べきの順

disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' コントローラの伝達関数 C(s) = kP > 0 ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

Cs = kP

disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' 開ループ伝達関数 L(s) = P(s)C(s) ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

Ls = Ps*Cs

disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' 周波数伝達関数 L(jw) ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

Ljw = subs(Ls,s,j*w)

disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' 実部 Re[L(jw)]，虚部 Im[L(jw)] ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

Re_Ljw = simplify(real(Ljw))
Im_Ljw = simplify(imag(Ljw))

disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' w -> 0 としたときの L(jw) ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

limit_Ljw_0 = limit(Ljw,w,0)

disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' w -> infty としたときの L(jw) ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

limit_Ljw_inf = limit(Ljw,w,Inf)


disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' Re[L(jw)] = 0 となる w = w1 > 0 ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

sol_w1 = solve(Re_Ljw,w)
n = length(sol_w1);

if length(sol_w1) > 0
    for i = 1:n
        if sol_w1(i) > 0
            w1 = sol_w1(i)
        end
    end
    
    disp(' ')
    disp(' ---- L(j*w1) ---- ')
    Ljw1 = simplify(subs(Ljw,w,w1))
else
    disp('解無し')
end


disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' Im[L(jw)] = 0 となる w = wpc > 0 ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

sol_w2 = solve(Im_Ljw,w)

disp(' ')
disp(' ---- 位相交差角周波数 wpc ---- ')
n = length(sol_w2);
for i = 1:n
    if sol_w2(i) > 0
        wpc = sol_w2(i)
    end
end

disp(' ')
disp(' ---- L(j*wpc) ---- ')
Ljwpc = simplify(subs(Ljw,w,wpc))

disp(' ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')
disp(' ナイキストの安定判別法による安定条件 ')
disp('++++++++++++++++++++++++++++++++++++++++++++++++++')

disp(' ')
disp(' ---- L(j*wpc) > -1 かつ kP > 0 ---- ')
sol = solve(Ljwpc > -1 & kP > 0, kP,'ReturnConditions',true);
condition = subs(sol.conditions,kP)

